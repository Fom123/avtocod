name: CI

on:
  push:
    branches:
      - develop
      - develop-*
  pull_request:
    branches:
      - develop
      - develop-*
  workflow_dispatch:
    branches:
      - develop
      - develop-*


jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - '3.10'
          - '3.9'
          - '3.8'

    steps:
      - uses: actions/checkout@master

      - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.12
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ secrets.CACHE_VERSION }}


      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Lint with flake8
        run: |
          poetry run flake8 avtocod examples

      - name: Check code-style (Black)
        run: |
          poetry run black --check --diff avtocod

#      - name: Mypy check
#        run: |
#          poetry run mypy avtocod examples

      - name: Run Tests (unit)
        run: |
          poetry run pytest --cov=avtocod --cov-config .coveragerc --cov-report=xml -m "not integration" --cov-append

      - name: Run Tests (integration)
        if: ${{ github.event_name == 'workflow_dispatch' }}  # only run integration tests on workflow_dispatch (not push/pull_request)
        continue-on-error: true
        run: |
          poetry run pytest --cov=avtocod --cov-config .coveragerc --cov-report=xml -m "integration" --cov-append

      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
          flags: unittests
          name: py-${{ matrix.python-version }}-${{ matrix.os }}
